name: Push to Docker Hub
on:
  push:
    branches:
      - dev
      - release.*
    paths:
      - 'apps/**'
  # workflow_run:
  #   workflows: ['Run Tests']
  #   types:
  #     - completed
env:
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  SYNCHRONIZE_DB: ${{ secrets.SYNCHRONIZE_DB }}
  NODE_ENV: ${{ secrets.ENV }}
  FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
  FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
  FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
  FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
  FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
  EMAIL_API_KEY: ${{ secrets.EMAIL_API_KEY }}
  EMAIL_VERIFICATION_BASE_URL: ${{ vars.EMAIL_VERIFICATION_BASE_URL }}
  CONTINUE_URL_PATH: ${{ vars.CONTINUE_URL_PATH }}
  GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
  APP: klubiq-dashboard
  PRIVATE_KEY: ${{ secrets.CERTIFICATE }}
  HOSTNAME: ${{ secrets.HOSTNAME }}
  USERNAME: ${{ secrets.USERNAME }}
  HEALTH_CHECK_URL: ${{ vars.HEALTH_CHECK_URL }}
  APP_NAME: ${{ vars.APP_NAME }}
  APP_VERSION: ${{ vars.APP_VERSION }}
  KLUBIQ_ADMIN_API_KEY: ${{ secrets.KLUBIQ_ADMIN_API_KEY }}
  SUPPORT_EMAIL: ${{ vars.EMAIL_VERIFICATION_BASE_URL }}
  TRANSACTIONAL_EMAIL_SENDER: ${{ vars.TRANSACTIONAL_EMAIL_SENDER }}
  TRANSACTIONAL_EMAIL_SENDER_NAME: ${{ vars.TRANSACTIONAL_EMAIL_SENDER_NAME }}
  GOOGLE_IDENTITY_ENDPOINT: ${{ vars.GOOGLE_IDENTITY_ENDPOINT }}
  CLOUDWATCH_ACCESS_KEY_ID: ${{ secrets.CLOUDWATCH_ACCESS_KEY_ID }}
  CLOUDWATCH_SECRET_ACCESS_KEY: ${{ secrets.CLOUDWATCH_SECRET_ACCESS_KEY }}
  CLOUDWATCH_REGION: ${{ vars.CLOUDWATCH_REGION }}
  AWS_S3_ACCESS_KEY_ID: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
  AWS_S3_SECRET_ACCESS_KEY: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
  AWS_S3_REGION: ${{ secrets.AWS_S3_REGION  }}
  PROPERTY_IMAGE_BUCKET_NAME: ${{ secrets.PROPERTY_IMAGE_BUCKET_NAME  }}

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     # import google admin sdk config file data
  #     - name: Load Google Service file
  #       run: echo $GOOGLE_SERVICES_JSON | base64 --decode > config.json

  #     - name: Build application
  #       run: |
  #         npm install
  #         npm run build

  #     - name: Archive production artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #        name: artifacts
  #        path: |
  #          dist

  docker:
    runs-on: ubuntu-latest
    # needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load Google Service file and copy env variables
        run: |
          echo $GOOGLE_SERVICES_JSON | base64 --decode > config.json
          cat << EOF > .env        
              DATABASE_HOST=${{ secrets.DATABASE_HOST }}
              DATABASE_PORT=${{ secrets.DATABASE_PORT }}
              DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
              DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
              DATABASE_NAME=${{ secrets.DATABASE_NAME }}
              SYNCHRONIZE_DB=${{ secrets.SYNCHRONIZE_DB }}
              NODE_ENV=${{ secrets.ENV }}
              FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
              FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
              FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
              FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
              FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
              FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
              FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}
              EMAIL_API_KEY=${{ secrets.EMAIL_API_KEY }}
              EMAIL_VERIFICATION_BASE_URL=${{ vars.EMAIL_VERIFICATION_BASE_URL }}
              CONTINUE_URL_PATH=${{ vars.CONTINUE_URL_PATH }}
              HEALTH_CHECK_URL=${{ vars.HEALTH_CHECK_URL }}
              APP_NAME=${{ vars.APP_NAME }}
              APP_VERSION=${{ vars.APP_VERSION }}
              KLUBIQ_ADMIN_API_KEY=${{ secrets.KLUBIQ_ADMIN_API_KEY }}
              SUPPORT_EMAIL=${{ vars.EMAIL_VERIFICATION_BASE_URL }}
              TRANSACTIONAL_EMAIL_SENDER=${{ vars.TRANSACTIONAL_EMAIL_SENDER }}
              TRANSACTIONAL_EMAIL_SENDER_NAME=${{ vars.TRANSACTIONAL_EMAIL_SENDER_NAME }}
              GOOGLE_IDENTITY_ENDPOINT=${{ vars.GOOGLE_IDENTITY_ENDPOINT }}
              CLOUDWATCH_ACCESS_KEY_ID=${{ secrets.CLOUDWATCH_ACCESS_KEY_ID }}
              CLOUDWATCH_SECRET_ACCESS_KEY=${{ secrets.CLOUDWATCH_SECRET_ACCESS_KEY }}
              CLOUDWATCH_REGION=${{ vars.CLOUDWATCH_REGION }}
              AWS_S3_ACCESS_KEY_ID=${{ secrets.AWS_S3_ACCESS_KEY_ID }}
              AWS_S3_SECRET_ACCESS_KEY=${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
              AWS_S3_REGION=${{ secrets.AWS_S3_REGION  }}
              PROPERTY_IMAGE_BUCKET_NAME=${{ secrets.PROPERTY_IMAGE_BUCKET_NAME  }}
          EOF

      - name: Login and push to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Build and push docker_compose
        run: docker compose -f docker-compose.prod.yml build --pull && docker compose -f docker-compose.prod.yml push

      # - name: Download prod artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: artifacts
      #     path: dist/

      # - name: Deploy to Lightsail
      #   uses: easingthemes/ssh-deploy@main
      #   with:
      #     REMOTE_HOST: ${{ secrets.SSH_HOST }}
      #     REMOTE_USER: ${{ secrets.SSH_USERNAME }}
      #     SSH_PRIVATE_KEY: ${{ secrets.LIGHTSAIL_SSH_CERT }}
      #     #SOURCE: "artifacts"
      #     EXCLUDE: "/node_modules/"
      #     TARGET: ${{ secrets.TARGET_DIR }}

      # - name: Executing docker compose in EC2 using ssh key
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.SSH_HOST }}
      #     username: ${{ secrets.SSH_USERNAME }}
      #     key: ${{ secrets.LIGHTSAIL_SSH_CERT }}
      #     script: |
      #       cd ${{ secrets.TARGET_DIR }}
      #       sudo docker compose -f docker-compose.prod.yml up -d --build
