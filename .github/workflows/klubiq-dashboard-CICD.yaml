name: Deploy Klubiq dasboard API
on:
  push:
    branches:
      - dev
    # paths:
    #   - '!klubiq-db/**'
    #   - '!.github/workflows/run-migrations-staging.yaml'
    #   - '!.github/workflows/run-migrations-prod.yaml'
    #   - '.github/workflows/klubiq-dashboard-CICD.yaml'
    #   - 'apps/klubiq-dashboard/**'
    #   - 'apps/klubiq-queue/**'
    #   - 'libs/**'
    #   - '.nest-cli.json'
    #   - 'package.json'
    #   - 'package-lock.json'
    #   - 'tsconfig.json'
    #   - 'tsconfig.build.json'
    paths:
    - 'apps/klubiq-dashboard/**'
    - 'apps/klubiq-queue/**'
    - 'libs/**'
  # workflow_run:
  #   workflows: ['Run Tests']
  #   types:
  #     - completed
env:
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  SYNCHRONIZE_DB: ${{ secrets.SYNCHRONIZE_DB }}
  NODE_ENV: ${{ secrets.ENV }}
  FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
  FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
  FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
  FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
  FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
  EMAIL_API_KEY: ${{ secrets.EMAIL_API_KEY }}
  EMAIL_VERIFICATION_BASE_URL: ${{ vars.EMAIL_VERIFICATION_BASE_URL }}
  CONTINUE_URL_PATH: ${{ vars.CONTINUE_URL_PATH }}
  GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
  APP: klubiq-dashboard-api
  QUEUE_APP: klubiq-queue
  PRIVATE_KEY: ${{ secrets.CERTIFICATE }}
  HOSTNAME: ${{ secrets.HOSTNAME }}
  USERNAME: ${{ secrets.USERNAME }}
  HEALTH_CHECK_URL: ${{ vars.HEALTH_CHECK_URL }}
  APP_NAME: ${{ vars.APP_NAME }}
  APP_VERSION: ${{ vars.APP_VERSION }}
  KLUBIQ_ADMIN_API_KEY: ${{ secrets.KLUBIQ_ADMIN_API_KEY }}
  SUPPORT_EMAIL: ${{ vars.SUPPORT_EMAIL }}
  TRANSACTIONAL_EMAIL_SENDER: ${{ vars.TRANSACTIONAL_EMAIL_SENDER }}
  TRANSACTIONAL_EMAIL_SENDER_NAME: ${{ vars.TRANSACTIONAL_EMAIL_SENDER_NAME }}
  GOOGLE_IDENTITY_ENDPOINT: ${{ vars.GOOGLE_IDENTITY_ENDPOINT }}
  CLOUDWATCH_ACCESS_KEY_ID: ${{ secrets.CLOUDWATCH_ACCESS_KEY_ID }}
  CLOUDWATCH_SECRET_ACCESS_KEY: ${{ secrets.CLOUDWATCH_SECRET_ACCESS_KEY }}
  CLOUDWATCH_REGION: ${{ vars.CLOUDWATCH_REGION }}
  AWS_S3_ACCESS_KEY_ID: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
  AWS_S3_SECRET_ACCESS_KEY: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
  AWS_S3_REGION: ${{ secrets.AWS_S3_REGION  }}
  PROPERTY_IMAGE_BUCKET_NAME: ${{ secrets.PROPERTY_IMAGE_BUCKET_NAME }}
  CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
  CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
  CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
  WEB_VAPID_PUSH_PUBLIC_KEY: ${{ secrets.WEB_PUSH_NOTIFICATION_PUBLIC_KEY }}
  WEB_VAPID_PUSH_PRIVATE_KEY: ${{ secrets.WEB_VAPID_PUSH_PRIVATE_KEY }}
  ORG_OWNER_ROLE_ID: ${{ secrets.ORG_OWNER_ROLE_ID }}
  PROPERTY_MANAGER_ROLE_ID: ${{ secrets.PROPERTY_MANAGER_ROLE_ID }}
  LANDLORD_ROLE_ID: ${{ secrets.LANDLORD_ROLE_ID }}
  KLUBIQ_ADMIN_ROLE_ID: ${{ secrets.KLUBIQ_ADMIN_ROLE_ID }}
  KLUBIQ_STAFF_ROLE_ID: ${{ secrets.KLUBIQ_STAFF_ROLE_ID }}
  KLUBIQ_SUPER_ADMIN_ROLE_ID: ${{ secrets.KLUBIQ_SUPER_ADMIN_ROLE_ID }}
  SNS_NOTIFICATION_TOPIC_ARN: ${{ secrets.SNS_NOTIFICATION_TOPIC_ARN }}
  TENANT_ROLE_ID: ${{ secrets.TENANT_ROLE_ID }}
  LEASE_MANAGER_ROLE_ID: ${{ secrets.LEASE_MANAGER_ROLE_ID }}
  PROPERTY_OWNER_ROLE_ID: ${{ secrets.PROPERTY_OWNER_ROLE_ID }}
  REDIS_HOST: ${{ secrets.REDIS_HOST }}
  REDIS_PORT: ${{ secrets.REDIS_PORT }}
  WORKER_PORT: ${{ secrets.WORKER_PORT }}
  APP_PORT: ${{ secrets.APP_PORT }}
  CLIENT_BASE_URL: ${{ vars.CLIENT_BASE_URL }}
  EMAIL_COPYRIGHT_TEXT: ${{ vars.EMAIL_COPYRIGHT_TEXT }}
  EMAIL_PRIVACY_LINK: ${{ vars.EMAIL_PRIVACY_LINK }}
  EMAIL_COPYRIGHT_LINK: ${{ vars.EMAIL_COPYRIGHT_LINK }}
  APP_SECRET: ${{ secrets.APP_SECRET }}
  KLUBIQ_API_APPCHECK_CLIENTS: ${{ secrets.KLUBIQ_API_APPCHECK_CLIENTS }}
  FIREBASE_APP_NAME: ${{ secrets.FIREBASE_APP_NAME }}
  TENANT_EMAIL_VERIFICATION_BASE_URL: ${{ vars.TENANT_EMAIL_VERIFICATION_BASE_URL }}
  TENANT_CONTINUE_URL_PATH: ${{ vars.TENANT_CONTINUE_URL_PATH }}
  LANDLORD_PORTAL_CLIENT_ID: ${{ secrets.LANDLORD_PORTAL_CLIENT_ID }}
  TENANT_PORTAL_CLIENT_ID: ${{ secrets.TENANT_PORTAL_CLIENT_ID }}
  ADMIN_PORTAL_CLIENT_ID: ${{ secrets.ADMIN_PORTAL_CLIENT_ID }}
  ZOHO_EMAIL_USER: ${{ secrets.ZOHO_EMAIL_USER }}
  ZOHO_EMAIL_PASSWORD: ${{ secrets.ZOHO_EMAIL_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Load Google Service file
        run: |
          echo $GOOGLE_SERVICES_JSON | base64 --decode > config.json
          npm install
          npm run build
          npm run build:queue
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: |
            dist
            env-export.sh
            config.json
            package.json
            package-lock.json

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download prod artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: artifacts/

      - name: Deploy to Lightsail
        uses: easingthemes/ssh-deploy@main
        with:
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_USER: ${{ secrets.SSH_USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.LIGHTSAIL_SSH_CERT }}
          SOURCE: 'artifacts/'
          EXCLUDE: '/node_modules/, node_modules, /node_modules, .github, .github/**, .git, .git/**'
          TARGET: ${{ secrets.TARGET_DIR }}
          SCRIPT_BEFORE: |
            sudo chown $USER ${{ secrets.TARGET_DIR }}
            cd ${{ secrets.TARGET_DIR }}
          SCRIPT_AFTER: |
            cd ${{ secrets.TARGET_DIR }}
            export DATABASE_HOST=${{ secrets.DATABASE_HOST }}
            export DATABASE_PORT=${{ secrets.DATABASE_PORT }}
            export DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            export DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            export DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            export SYNCHRONIZE_DB=${{ secrets.SYNCHRONIZE_DB }}
            export NODE_ENV=${{ secrets.ENV }}
            export FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
            export FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
            export FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
            export FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
            export FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
            export FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
            export FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}
            export EMAIL_API_KEY=${{ secrets.EMAIL_API_KEY }}
            export EMAIL_VERIFICATION_BASE_URL=${{ vars.EMAIL_VERIFICATION_BASE_URL }}
            export CONTINUE_URL_PATH=${{ vars.CONTINUE_URL_PATH }}
            export HEALTH_CHECK_URL=${{ vars.HEALTH_CHECK_URL }}
            export APP_NAME=${{ vars.APP_NAME }}
            export APP_VERSION=${{ vars.APP_VERSION }}
            export KLUBIQ_ADMIN_API_KEY=${{ secrets.KLUBIQ_ADMIN_API_KEY }}
            export SUPPORT_EMAIL=${{ vars.SUPPORT_EMAIL }}
            export TRANSACTIONAL_EMAIL_SENDER=${{ vars.TRANSACTIONAL_EMAIL_SENDER }}
            export TRANSACTIONAL_EMAIL_SENDER_NAME=${{ vars.TRANSACTIONAL_EMAIL_SENDER_NAME }}
            export GOOGLE_IDENTITY_ENDPOINT=${{ vars.GOOGLE_IDENTITY_ENDPOINT }}
            export CLOUDWATCH_ACCESS_KEY_ID=${{ secrets.CLOUDWATCH_ACCESS_KEY_ID }}
            export CLOUDWATCH_SECRET_ACCESS_KEY=${{ secrets.CLOUDWATCH_SECRET_ACCESS_KEY }}
            export CLOUDWATCH_REGION=${{ vars.CLOUDWATCH_REGION }}
            export AWS_S3_ACCESS_KEY_ID=${{ secrets.AWS_S3_ACCESS_KEY_ID }}
            export AWS_S3_SECRET_ACCESS_KEY=${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
            export AWS_S3_REGION=${{ secrets.AWS_S3_REGION  }}
            export PROPERTY_IMAGE_BUCKET_NAME=${{ secrets.PROPERTY_IMAGE_BUCKET_NAME  }}
            export CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
            export CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
            export CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
            export WEB_VAPID_PUSH_PUBLIC_KEY=${{ secrets.WEB_PUSH_NOTIFICATION_PUBLIC_KEY }}
            export WEB_VAPID_PUSH_PRIVATE_KEY=${{ secrets.WEB_VAPID_PUSH_PRIVATE_KEY }}
            export ORG_OWNER_ROLE_ID=${{ secrets.ORG_OWNER_ROLE_ID }}
            export PROPERTY_MANAGER_ROLE_ID=${{ secrets.PROPERTY_MANAGER_ROLE_ID }}
            export LANDLORD_ROLE_ID=${{ secrets.LANDLORD_ROLE_ID }}
            export KLUBIQ_ADMIN_ROLE_ID=${{ secrets.KLUBIQ_ADMIN_ROLE_ID }}
            export KLUBIQ_STAFF_ROLE_ID=${{ secrets.KLUBIQ_STAFF_ROLE_ID }}
            export KLUBIQ_SUPER_ADMIN_ROLE_ID=${{ secrets.KLUBIQ_SUPER_ADMIN_ROLE_ID }}
            export SNS_NOTIFICATION_TOPIC_ARN=${{ secrets.SNS_NOTIFICATION_TOPIC_ARN }}
            export TENANT_ROLE_ID=${{ secrets.TENANT_ROLE_ID }}
            export LEASE_MANAGER_ROLE_ID=${{ secrets.LEASE_MANAGER_ROLE_ID }}
            export PROPERTY_OWNER_ROLE_ID=${{ secrets.PROPERTY_OWNER_ROLE_ID }}
            export REDIS_HOST=${{ secrets.REDIS_HOST }}
            export REDIS_PORT=${{ secrets.REDIS_PORT }}
            export WORKER_PORT=${{ secrets.WORKER_PORT }}
            export APP_PORT=${{ secrets.APP_PORT }}
            export CLIENT_BASE_URL=${{ vars.CLIENT_BASE_URL }}
            export EMAIL_COPYRIGHT_TEXT=${{ vars.EMAIL_COPYRIGHT_TEXT }}
            export EMAIL_PRIVACY_LINK=${{ vars.EMAIL_PRIVACY_LINK }}
            export EMAIL_COPYRIGHT_LINK=${{ vars.EMAIL_COPYRIGHT_LINK }}
            export APP_SECRET=${{ secrets.APP_SECRET }}
            export KLUBIQ_API_APPCHECK_CLIENTS=${{ secrets.KLUBIQ_API_APPCHECK_CLIENTS }}
            export FIREBASE_APP_NAME=${{ secrets.FIREBASE_APP_NAME }}
            export TENANT_EMAIL_VERIFICATION_BASE_URL=${{ vars.TENANT_EMAIL_VERIFICATION_BASE_URL }}
            export TENANT_CONTINUE_URL_PATH=${{ vars.TENANT_CONTINUE_URL_PATH }}
            export LANDLORD_PORTAL_CLIENT_ID=${{ secrets.LANDLORD_PORTAL_CLIENT_ID }}
            export TENANT_PORTAL_CLIENT_ID=${{ secrets.TENANT_PORTAL_CLIENT_ID }}
            export ADMIN_PORTAL_CLIENT_ID=${{ secrets.ADMIN_PORTAL_CLIENT_ID }}
            export ZOHO_EMAIL_USER=${{ secrets.ZOHO_EMAIL_USER }}
            export ZOHO_EMAIL_PASSWORD=${{ secrets.ZOHO_EMAIL_PASSWORD }}
            npm pkg delete scripts.prepare && npm ci --omit=dev && npm cache clean --force

            # Check if the process is running
            if pm2 status ${{ env.APP }}  | grep -q "${{ env.APP }}" ; then
                echo "Process '${{ env.APP }}' is already running."
                pm2 restart ${{ env.APP }} -a --update-env --watch

            else
                echo "Process '${{ env.APP }}' is not running. Starting a new process..."
                pm2 start ${{ secrets.TARGET_DIR }}/dist/apps/klubiq-dashboard/main.js --name ${{ env.APP }} -a --update-env --watch
            fi

            if pm2 status ${{ env.QUEUE_APP }} | grep -q "${{ env.QUEUE_APP }}"; then
                echo "Process '${{ env.QUEUE_APP }}' is already running."
                pm2 restart ${{ env.QUEUE_APP }} -a --update-env --watch
            else
                echo "Process '${{ env.QUEUE_APP }}' is not running. Starting a new process..."
                pm2 start ${{ secrets.TARGET_DIR }}/dist/apps/klubiq-queue/main.js --name ${{ env.QUEUE_APP }} -a --update-env --watch
            fi
            pm2 save
