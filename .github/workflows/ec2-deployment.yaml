
name: Deploy Klubiq dasboard to Amazon EC2
on:
  push:
    branches: 
      - dev
    # paths:
    #   - 'apps/klubiq-dashboard/**'
env: 
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_PORT: ${{ secrets.DATABASE_HOST }}
  DATABASE_USERNAME: ${{ secrets.DATABASE_HOST }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  SYNCHRONIZE_DB: ${{ secrets.SYNCHRONIZE_DB }}
  ENV: ${{ secrets.ENV }}
  FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
  FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
  FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
  FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
  FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
  EMAIL_API_KEY: ${{ secrets.EMAIL_API_KEY }}
  EMAIL_VERIFICATION_BASE_URL: ${{ vars.EMAIL_VERIFICATION_BASE_URL }}
  CONTINUE_URL_PATH: ${{ vars.CONTINUE_URL_PATH }}
  GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
  APP: klubiq-dashboard
  PRIVATE_KEY: ${{ secrets.CERTIFICATE }}
  HOSTNAME: ${{ secrets.HOSTNAME }}
  USERNAME: ${{ secrets.USERNAME }}

jobs:
  test:

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Test application
        run: |
          npm install
          npm test
        
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # import google admin sdk config file data
      - name: Load Google Service file
        run: echo $GOOGLE_SERVICES_JSON | base64 --decode > config.json

      - name: Build application
        run: |
          npm install
          npm run build
        
  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load Google Service file
        run: echo $GOOGLE_SERVICES_JSON | base64 --decode > config.json
      
     # - name: Login to Docker Hub
        #uses: docker/login-action@v2
       # with:
          #username: ${{ secrets.DOCKER_HUB_USERNAME }}
          #password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Build and push docker_compose
        run: docker compose -f docker-compose.prod.yml build --pull && docker compose -f docker-compose.prod.yml push
        
      - name: SSH into EC2 instance and deploy
        uses: appleboy/ssh-action@master

        with:
          host: ${{ secrets.HOSTNAME }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.CERTIFICATE }}
          script: |
            sudo docker compose -f docker-compose.prod.yml pull
            sudo docker compose -f docker-compose.prod.yml stop || true 
            sudo docker compose -f docker-compose.prod.yml rm || true 
            sudo docker compose -f docker-compose.prod.yml up -d --build

  
