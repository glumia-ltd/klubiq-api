name: Run Database Migration
on:
  push:
    branches:
      - dev
    paths:
      - 'klubiq-db/**'
      - 'libs/common/**'
      - '.github/workflows/run-migrations-staging.yaml'
env:
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  SYNCHRONIZE_DB: ${{ secrets.SYNCHRONIZE_DB }}
  NODE_ENV: ${{ secrets.ENV }}
  FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
  FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
  FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
  FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
  FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
  EMAIL_API_KEY: ${{ secrets.EMAIL_API_KEY }}
  EMAIL_VERIFICATION_BASE_URL: ${{ vars.EMAIL_VERIFICATION_BASE_URL }}
  CONTINUE_URL_PATH: ${{ vars.CONTINUE_URL_PATH }}
  GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
  APP: klubiq-dashboard-api
  QUEUE_APP: klubiq-queue
  PRIVATE_KEY: ${{ secrets.CERTIFICATE }}
  HOSTNAME: ${{ secrets.HOSTNAME }}
  USERNAME: ${{ secrets.USERNAME }}
  HEALTH_CHECK_URL: ${{ vars.HEALTH_CHECK_URL }}
  APP_NAME: ${{ vars.APP_NAME }}
  APP_VERSION: ${{ vars.APP_VERSION }}
  KLUBIQ_ADMIN_API_KEY: ${{ secrets.KLUBIQ_ADMIN_API_KEY }}
  SUPPORT_EMAIL: ${{ vars.SUPPORT_EMAIL }}
  TRANSACTIONAL_EMAIL_SENDER: ${{ vars.TRANSACTIONAL_EMAIL_SENDER }}
  TRANSACTIONAL_EMAIL_SENDER_NAME: ${{ vars.TRANSACTIONAL_EMAIL_SENDER_NAME }}
  GOOGLE_IDENTITY_ENDPOINT: ${{ vars.GOOGLE_IDENTITY_ENDPOINT }}
  CLOUDWATCH_ACCESS_KEY_ID: ${{ secrets.CLOUDWATCH_ACCESS_KEY_ID }}
  CLOUDWATCH_SECRET_ACCESS_KEY: ${{ secrets.CLOUDWATCH_SECRET_ACCESS_KEY }}
  CLOUDWATCH_REGION: ${{ vars.CLOUDWATCH_REGION }}
  AWS_S3_ACCESS_KEY_ID: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
  AWS_S3_SECRET_ACCESS_KEY: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
  AWS_S3_REGION: ${{ secrets.AWS_S3_REGION  }}
  PROPERTY_IMAGE_BUCKET_NAME: ${{ secrets.PROPERTY_IMAGE_BUCKET_NAME }}
  CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
  CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
  CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
  WEB_VAPID_PUSH_PUBLIC_KEY: ${{ secrets.WEB_PUSH_NOTIFICATION_PUBLIC_KEY }}
  WEB_VAPID_PUSH_PRIVATE_KEY: ${{ secrets.WEB_VAPID_PUSH_PRIVATE_KEY }}
  ORG_OWNER_ROLE_ID: ${{ secrets.ORG_OWNER_ROLE_ID }}
  PROPERTY_MANAGER_ROLE_ID: ${{ secrets.PROPERTY_MANAGER_ROLE_ID }}
  LANDLORD_ROLE_ID: ${{ secrets.LANDLORD_ROLE_ID }}
  KLUBIQ_ADMIN_ROLE_ID: ${{ secrets.KLUBIQ_ADMIN_ROLE_ID }}
  KLUBIQ_STAFF_ROLE_ID: ${{ secrets.KLUBIQ_STAFF_ROLE_ID }}
  KLUBIQ_SUPER_ADMIN_ROLE_ID: ${{ secrets.KLUBIQ_SUPER_ADMIN_ROLE_ID }}
  SNS_NOTIFICATION_TOPIC_ARN: ${{ secrets.SNS_NOTIFICATION_TOPIC_ARN }}
  TENANT_ROLE_ID: ${{ secrets.TENANT_ROLE_ID }}
  LEASE_MANAGER_ROLE_ID: ${{ secrets.LEASE_MANAGER_ROLE_ID }}
  PROPERTY_OWNER_ROLE_ID: ${{ secrets.PROPERTY_OWNER_ROLE_ID }}
  REDIS_PORT: ${{ secrets.REDIS_PORT }}
  WORKER_PORT: ${{ secrets.WORKER_PORT }}
  APP_PORT: ${{ secrets.APP_PORT }}
  CLIENT_BASE_URL: ${{ vars.CLIENT_BASE_URL }}
  EMAIL_COPYRIGHT_TEXT: ${{ vars.EMAIL_COPYRIGHT_TEXT }}
  EMAIL_PRIVACY_LINK: ${{ vars.EMAIL_PRIVACY_LINK }}
  EMAIL_COPYRIGHT_LINK: ${{ vars.EMAIL_COPYRIGHT_LINK }}
  APP_SECRET: ${{ secrets.APP_SECRET }}

jobs:
  migration:
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # with:
          # sparse-checkout: klubiq-db
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
            node-version: '22'

      - name: Load Google Service file
        run: |
          echo $GOOGLE_SERVICES_JSON | base64 --decode > config.json

      - name: Install root dependencies
        env:
          HUSKY: 0
          HUSKY_SKIP_INSTALL: 1
        run: npm install

      - name: Build Common Library
        run: npm run build:libs:common
 
      - name: Build Database project
        run: |
          cd klubiq-db
          npm ci
          npm run build

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: |
            klubiq-db/build/migrations/
            klubiq-db/package*.json
            klubiq-db/node_modules
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: artifacts/
      - name: copy and run migration via ssh
        uses: easingthemes/ssh-deploy@main
        with:
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_USER: ${{ secrets.SSH_USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.LIGHTSAIL_SSH_CERT }}
          SOURCE: 'artifacts/'
          EXCLUDE: '/node_modules/, node_modules, /node_modules, .github, .github/**, .git, .git/**'
          TARGET: ${{ vars.DB_TARGET_DIR }}
          SCRIPT_BEFORE: |
            if [ ! -d "${{ vars.DB_TARGET_DIR }}" ]; then
              mkdir -p ${{ vars.DB_TARGET_DIR }}
            fi
            sudo chown $USER ${{ vars.DB_TARGET_DIR }}
            cd ${{ vars.DB_TARGET_DIR }}
          SCRIPT_AFTER: |
            cd ${{ vars.DB_TARGET_DIR }}
            set -e # Exit on any error      
            export DATABASE_HOST=${{ secrets.DATABASE_HOST }}
            export DATABASE_PORT=${{ secrets.DATABASE_PORT }}
            export DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            export DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            export DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            export SYNCHRONIZE_DB=${{ secrets.SYNCHRONIZE_DB }}
            export NODE_ENV=${{ secrets.ENV }}
            echo "Running NPM INSTALL"
            npm ci || exit 1
            echo "Running NPM GENERATE MIGRATION"
            npm run generate:migration || exit 1
            echo "Running NPM MIGRATION"
            npm run migration || exit 1
            echo "CLEANING UP"
            rm -rf node_modules
